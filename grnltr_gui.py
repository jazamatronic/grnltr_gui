#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Sat Mar 25 20:57:52 2023
#

# begin wxGlade: dependencies
import wx
import wx.lib.mixins.inspection as wit
import wx.lib.agw.pygauge as PG


from matplotlib.backends.backend_wxagg import (
    FigureCanvasWxAgg as FigureCanvas,
    NavigationToolbar2WxAgg as NavigationToolbar)
from matplotlib.figure import Figure

from smpl import smpl
import math
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class CanvasPanel(wx.Panel):
    def __init__(self, parent, topFrame):
        wx.Panel.__init__(self, parent)
        self.topFrame = topFrame
        self.figure = Figure(figsize=(2, 2))
        self.axes = self.figure.add_subplot()
        self.axes.get_yaxis().set_visible(False)
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        self.SetSizer(self.sizer)
        self.Fit()
        self.canvas.mpl_connect("scroll_event", self.mouse_scroll_event)
        self.canvas.mpl_connect("button_press_event", self.click_event)
        self.canvas.Bind(wx.EVT_ENTER_WINDOW, self.change_cursor)
        self.xlim = None
        self.startfill = None
        self.endfill = None

    def clear(self):
        self.xlim = None
        self.startfill = None
        self.endfill = None
        self.axes.clear()
        self.canvas.draw()
        self.canvas.Refresh()

    def draw(self, wf):
        self.axes.clear()
        self.axes.plot(wf)
        self.xlim = self.axes.get_xlim()
        self.ylim = self.axes.get_ylim()
        self.axes.autoscale(False)
        start = sample_list[active_slotnum].get_start()
        end = sample_list[active_slotnum].get_end()
        if (start > 0):
            self.startfill = self.axes.fill((self.xlim[0], start, start, self.xlim[0]), (self.ylim[0], self.ylim[0], self.ylim[-1], self.ylim[-1]), "b", alpha=0.3)
        if (end < sample_list[active_slotnum].num_samples):
            self.endfill = self.axes.fill((self.xlim[-1], end, end, self.xlim[-1]), (self.ylim[0], self.ylim[0], self.ylim[-1], self.ylim[-1]), "b", alpha=0.3)
        self.canvas.draw()
        self.canvas.Refresh()

    def change_cursor(self, evt):
        self.canvas.SetCursor(wx.Cursor(wx.CURSOR_CROSS))

    # https://matplotlib.org/stable/users/explain/event_handling.html
    def mouse_scroll_event(self, evt):
        #print("xdata: {}, ydata: {}, button: {}".format(evt.xdata, evt.ydata, evt.button))
        if ((self.xlim == None) | (evt.xdata == None) | (evt.ydata == None)):
            return
        xdata = evt.xdata
        xlim = self.axes.get_xlim()
        xldist = xdata - xlim[0]
        xrdist = xlim[-1] - xdata
        if evt.button == "up":
            newxl = max(self.xlim[0],  xdata - xldist / 2)
            newxr = min(self.xlim[-1], xdata + xrdist / 2)
            self.axes.set_xlim((newxl, newxr))
        if evt.button == "down":
            newxl = max(self.xlim[0],  xdata - xldist * 2)
            newxr = min(self.xlim[-1], xdata + xrdist * 2)
            self.axes.set_xlim((newxl, newxr))
        self.canvas.draw()
        self.canvas.Refresh()

    def click_event(self, evt):
        #print("xdata: {}, ydata: {}, button: {}".format(evt.xdata, evt.ydata, evt.button))
        if ((self.xlim == None) | (evt.xdata == None) | (evt.ydata == None)):
            return
        xdata = evt.xdata
        xlim = self.axes.get_xlim()
        xrange = xlim[-1] - xlim[0]
        xrange10pct = xrange * 0.1
        if evt.button == 1:
            if self.startfill != None:
                for f in self.startfill:
                    f.remove()
            self.startfill = self.axes.fill((self.xlim[0], xdata, xdata, self.xlim[0]), (self.ylim[0], self.ylim[0], self.ylim[-1], self.ylim[-1]), "b", alpha=0.3)
            sample_list[active_slotnum].set_start(xdata)
            newxl = max(self.xlim[0],  xdata - xrange10pct)
            self.axes.set_xlim((newxl, xlim[-1]))
        if evt.button == 3:
            if self.endfill != None:
                for f in self.endfill:
                    f.remove()
            self.endfill = self.axes.fill((self.xlim[-1], xdata, xdata, self.xlim[-1]), (self.ylim[0], self.ylim[0], self.ylim[-1], self.ylim[-1]), "b", alpha=0.3)
            sample_list[active_slotnum].set_end(xdata)
            newxr = min(self.xlim[-1], xdata + xrange10pct)
            self.axes.set_xlim((xlim[0], newxr))
        if evt.button == 2:
            start = sample_list[active_slotnum].get_start()
            end = sample_list[active_slotnum].get_end()
            if (xdata < start):
                for f in self.startfill:
                    f.remove()
                sample_list[active_slotnum].set_start(0)
                self.startfill = None
                newxl = self.xlim[0]
                self.axes.set_xlim((newxl, xlim[-1]))
            if (xdata > end):
                for f in self.endfill:
                    f.remove()
                sample_list[active_slotnum].set_end(-1)
                self.endfill = None
                newxr = self.xlim[-1]
                self.axes.set_xlim((xlim[0], newxr))
        self.canvas.draw()
        self.canvas.Refresh()
        self.topFrame.update_usage_gauge()

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.lastdir = ""
        self.export_path = ""

        # begin wxGlade: MyFrame.__init__
        size = (1340, 620)
        #kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        kwds["style"] = kwds.get("style", 0) | (wx.DEFAULT_FRAME_STYLE & ~(wx.RESIZE_BORDER | wx.MAXIMIZE_BOX))
        wx.Frame.__init__(self, *args, **kwds, size=size)
        # buttons are 94
        self.SetSize(size)
        self.SetTitle("grnltr_gui")

        self.btns = {}

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        self.SetMenuBar(self.frame_menubar)

        export_menu = wx.Menu()
        # see https://wxpython.org/Phoenix/docs/html/stock_items.html for IDs
        new_menu_item = export_menu.Append(wx.ID_NEW, "New", "New")
        export_menu.Append(wx.ID_SEPARATOR)
        export_menu_item = export_menu.Append(wx.ID_CONVERT, "Export", "Export")
        export_menu.Append(wx.ID_SEPARATOR)
        load_menu_item = export_menu.Append(wx.ID_OPEN, "Open Setup", "Open Setup")
        setup_menu_item = export_menu.Append(wx.ID_SAVE, "Save Setup", "Save Setup")
        export_menu.Append(wx.ID_SEPARATOR)
        exit_menu_item = export_menu.Append(wx.ID_EXIT, "Quit", "Bye")
        self.Bind(wx.EVT_MENU, self.new_grnltr, new_menu_item) 
        self.Bind(wx.EVT_MENU, self.export, export_menu_item) 
        self.Bind(wx.EVT_MENU, self.save_setup, setup_menu_item) 
        self.Bind(wx.EVT_MENU, self.load_setup, load_menu_item) 
        self.Bind(wx.EVT_MENU, self.exit_app,   exit_menu_item) 
        self.frame_menubar.Append(export_menu, "grnltr")
        # Menu Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY, name="main")

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        flags = wx.SizerFlags(0)
        flags.Expand()
        flags.Align(wx.ALIGN_LEFT)
        sizer_1.Add(sizer_2, flags)

        sizer_2.AddSpacer(10)

        sizer_gauge = wx.FlexGridSizer(1, 2, 5, 5)
        sizer_gauge.AddGrowableCol(1, 0)

        label_gauge = wx.StaticText(self.panel_1, wx.ID_ANY, "mem")
        sizer_gauge.Add(label_gauge, 0, wx.ALIGN_CENTER, 0)

        self.gauge_1 = PG.PyGauge(self.panel_1, wx.ID_ANY, range=100, style=wx.GA_HORIZONTAL | wx.GA_SMOOTH, size=(300, 40))
        self.gauge_1.SetBorderColor("black")
        sizer_gauge.Add(self.gauge_1, 1, wx.EXPAND | wx.RIGHT, 15)

        sizer_2.Add(sizer_gauge, 0, wx.EXPAND, 0)
        sizer_2.AddSpacer(10)

        grid_sizer_1 = wx.GridSizer(4, 4, 0, 0)
        sizer_2.Add(grid_sizer_1, 0, wx.SHAPED | wx.FIXED_MINSIZE, 0)

        self.slot_map = { 13:1, 14:2, 15:3, 16:4,
                     9:5,  10:6, 11:7, 12:8,
                     5:9,  6:10, 7:11, 8:12,
                     1:13, 2:14, 3:15, 4:16 }
        for slot_number in range(1, 17, 1): 
            sample_list.append(smpl(slot_number))
            label = "slot_{:02d}".format(self.slot_map[slot_number])
            btn = wx.ToggleButton(self.panel_1, wx.ID_ANY, label, size=(115, 115))
            self.btns.update({self.slot_map[slot_number] : btn})
            grid_sizer_1.Add(btn, 0, wx.SHAPED | wx.FIXED_MINSIZE, 0)
            btn.Bind(wx.EVT_TOGGLEBUTTON, lambda evt, temp=label: self.slot_button(evt, temp))

        sizer_1.AddSpacer(10)

        self.panel_2 = wx.Panel(self.panel_1, wx.ID_ANY, name="right")
        sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(6, 2, 5, 5)
        grid_sizer_2.AddGrowableCol(1, 0)
        sizer_3.Add(grid_sizer_2, 0, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_2, wx.ID_ANY, "input_file")
        grid_sizer_2.Add(label_1, 0, wx.ALIGN_CENTER, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.text_ctrl_1, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)

        label_2 = wx.StaticText(self.panel_2, wx.ID_ANY, "input_rate")
        grid_sizer_2.Add(label_2, 0, wx.ALIGN_CENTER, 0)

        self.text_ctrl_2 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.text_ctrl_2, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)

        label_3 = wx.StaticText(self.panel_2, wx.ID_ANY, "input_channels")
        grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER, 0)

        self.text_ctrl_3 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.text_ctrl_3, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)

        label_4 = wx.StaticText(self.panel_2, wx.ID_ANY, "input_bitdepth")
        grid_sizer_2.Add(label_4, 0, wx.ALIGN_CENTER, 0)

        self.text_ctrl_4 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.text_ctrl_4, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)

        label_5 = wx.StaticText(self.panel_2, wx.ID_ANY, "input_duration")
        grid_sizer_2.Add(label_5, 0, wx.ALIGN_CENTER, 0)

        self.text_ctrl_5 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.text_ctrl_5, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)
        
        self.est_bpm = wx.Button(self.panel_2, wx.ID_ANY, "est bpm")
        grid_sizer_2.Add(self.est_bpm, 0, wx.EXPAND, 0)

        self.text_ctrl_6 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_6, 0, wx.EXPAND | wx.ALIGN_LEFT | wx.RIGHT, 10)

        self.wf_panel = CanvasPanel(self.panel_2, self)
        sizer_3.Add(self.wf_panel, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 20)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.AddSpacer(250)
        self.load_sample = wx.Button(self.panel_2, wx.ID_ANY, "reload")
        sizer_4.Add(self.load_sample, 0, wx.LEFT | wx.RIGHT, 10)

        self.play_sample = wx.Button(self.panel_2, wx.ID_ANY, "play")
        sizer_4.Add(self.play_sample, 0, wx.LEFT | wx.RIGHT, 10)

        self.stop_sample = wx.Button(self.panel_2, wx.ID_ANY, "stop")
        sizer_4.Add(self.stop_sample, 0, wx.LEFT | wx.RIGHT, 10)

        self.loop_sample = wx.CheckBox(self.panel_2, wx.ID_ANY, "loop")
        sizer_4.Add(self.loop_sample, 0, wx.LEFT | wx.RIGHT, 10)

        self.rev_sample = wx.CheckBox(self.panel_2, wx.ID_ANY, "rev")
        sizer_4.Add(self.rev_sample, 0, wx.LEFT | wx.RIGHT, 10)

        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_1)
        self.panel_2.SetSizer(sizer_3)

        self.Layout()

        self.est_bpm.Bind(wx.EVT_BUTTON, self.estimate_bpm)
        self.load_sample.Bind(wx.EVT_BUTTON, self.load_sample_button)
        self.play_sample.Bind(wx.EVT_BUTTON, self.play_sample_button)
        self.stop_sample.Bind(wx.EVT_BUTTON, self.stop_sample_button)
        self.loop_sample.Bind(wx.EVT_CHECKBOX, self.loop_sample_checkbox)
        self.rev_sample.Bind(wx.EVT_CHECKBOX, self.rev_sample_checkbox)
        self.text_ctrl_6.Bind(wx.EVT_TEXT_ENTER, self.input_bpm)

        # end wxGlade

        # switchable panels?
        # https://oren-sifri.medium.com/switching-between-panels-in-wxpython-9b1cd479eab3
    def open_wav(self):
        with wx.FileDialog(self, "Open WAV file", wildcard="WAV files (*.wav;*.WAV)|*.wav;*.WAV",
                       style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:

            if self.lastdir != "":
                fileDialog.SetDirectory(self.lastdir)
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind

            # Proceed loading the file chosen by the user
            pathname = fileDialog.GetPath()
            self.lastdir = fileDialog.GetDirectory()
            return pathname

    def display_sample_info(self):
        self.text_ctrl_1.SetValue(sample_list[active_slotnum].input_filename)
        self.text_ctrl_2.SetValue(str(sample_list[active_slotnum].input_rate))
        self.text_ctrl_3.SetValue(str(sample_list[active_slotnum].input_channels))
        self.text_ctrl_4.SetValue(str(sample_list[active_slotnum].input_bitdepth))
        self.text_ctrl_5.SetValue(str(sample_list[active_slotnum].input_duration))
        self.text_ctrl_6.SetValue("{:.2f}".format(sample_list[active_slotnum].bpm))
        self.loop_sample.SetValue(sample_list[active_slotnum].loop)
        self.rev_sample.SetValue(sample_list[active_slotnum].rev)
        self.wf_panel.draw(sample_list[active_slotnum].get_waveform(False, True))
        self.update_usage_gauge()

    def clear_sample_info(self):
        self.text_ctrl_1.SetValue('')
        self.text_ctrl_2.SetValue('')
        self.text_ctrl_3.SetValue('')
        self.text_ctrl_4.SetValue('')
        self.text_ctrl_5.SetValue('')
        self.text_ctrl_6.SetValue('')
        self.loop_sample.SetValue(False)
        self.rev_sample.SetValue(False)
        self.wf_panel.clear()

    def update_usage_gauge(self):
        total_sample_size = 0
        for i in sample_list:
            total_sample_size += i.size_estimate
        self.gauge_1.SetValue(int((total_sample_size / free_bytes) * 100))
        self.Refresh()

    def slot_button(self, event, button_label):  # wxGlade: MyFrame.<event_handler>
        global active_slotnum
        if (active_slotnum >= 0):
            self.btns[active_slotnum + 1].SetValue(False)
        slot, slotnumstr = button_label.split('_')
        slotnum = int(slotnumstr) - 1
        #print("{} {} {}".format(button_label, slotnum, active_slotnum))
        active_slotnum = slotnum
        if (sample_list[slotnum].input_file_is_set() == False):
            pathname = self.open_wav()
            if pathname is None:
                self.clear_sample_info()
                return
            else:
                sample_list[slotnum].set_input_file(pathname)
        self.display_sample_info()
        event.Skip()

    def load_sample_button(self, event):
        pathname = self.open_wav()
        if pathname is None:
            return
        sample_list[active_slotnum].set_input_file(pathname)
        self.display_sample_info()
        event.Skip()

    def play_sample_button(self, event): 
        sample_list[active_slotnum].preview()
        event.Skip()

    def stop_sample_button(self, event): 
        sample_list[active_slotnum].stop()
        event.Skip()

    def loop_sample_checkbox(self, event): 
        sample_list[active_slotnum].set_loop(self.loop_sample.GetValue())
        event.Skip()

    def rev_sample_checkbox(self, event): 
        sample_list[active_slotnum].set_rev(self.rev_sample.GetValue())
        event.Skip()

    def input_bpm(self, event):
        bpm = float(self.text_ctrl_6.GetValue())
        sample_list[active_slotnum].set_bpm(bpm)
        event.Skip()

    def estimate_bpm(self, event):
        bpm = sample_list[active_slotnum].estimate_bpm()
        self.text_ctrl_6.SetValue("{:.2f}".format(bpm))
        sample_list[active_slotnum].set_bpm(bpm)
        event.Skip()

    # Menu Items

    def new_grnltr(self, event):
        global sample_list
        sample_list = []
        for slot_number in range(1, 17, 1): 
            sample_list.append(smpl(slot_number))
        self.clear_sample_info()
        self.update_usage_gauge()

    def export(self, event):
        with wx.DirDialog (None, "Choose export directory", "", wx.DD_DEFAULT_STYLE) as dirDialog:
            if self.export_path != "":
                dirDialog.SetPath(self.export_path)
            if dirDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            self.export_path = dirDialog.GetPath()

        f = open("{}/grnltr.cfg".format(self.export_path), "w")
        f.write("#file,bpm,loop,rev\n")
        for i in sample_list:
            if i.input_file_is_set():
                filename = "{:02d}.wav".format(i.slot)
                i.set_export_filename("{}/{}".format(self.export_path, filename))
                i.export_wav()
                print(i.sample_info(True))
                f.write("{}\n".format(i.sample_info(True)))
        f.close()

    def save_setup(self, event):
        with wx.DirDialog (None, "Choose export directory", "", wx.DD_DEFAULT_STYLE) as dirDialog:
            if self.export_path != "":
                dirDialog.SetPath(self.export_path)
            if dirDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
        self.export_path = dirDialog.GetPath()

        f = open("{}/grnltr.setup".format(self.export_path), "w")
        f.write("#slot,file,bpm,loop,rev,start,end\n")
        for i in sample_list:
            if i.input_file_is_set():
                f.write("{}\n".format(i.sample_info()))
        f.close()

    def load_setup(self, event):
        global active_slotnum
        with wx.FileDialog(self, "Open Setup file", wildcard="Setup files (*.setup)|*.setup;",
                       style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if self.export_path != "":
                fileDialog.SetDirectory(self.export_path)
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind

        if (active_slotnum >= 0):
            self.btns[active_slotnum + 1].SetValue(False)
        setup_file = fileDialog.GetPath()
        f = open(setup_file, "r")
        hdr = f.readline()
        for i in f:
            slot, pathname, bpm, loop, rev, start, end = i.split(",")
            slot = int(slot)
            active_slotnum = slot - 1
            sample_list[active_slotnum].set_input_file(pathname)
            sample_list[active_slotnum].set_bpm(float(bpm))
            sample_list[active_slotnum].set_loop(loop == "True")
            sample_list[active_slotnum].set_rev(rev == "True")
            sample_list[active_slotnum].set_start(int(start))
            sample_list[active_slotnum].set_end(int(end))
        f.close()
        self.btns[active_slotnum + 1].SetValue(True)
        self.display_sample_info()

    def exit_app(self, event):
        dlg = wx.MessageDialog(self,
            "Done sample curation?",
            "Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()
        if result == wx.ID_OK:
            self.Destroy()

# end of class MyFrame

#class MyApp(wx.App):
#    def OnInit(self):
#        self.frame = MyFrame(None, wx.ID_ANY, "")
#        self.SetTopWindow(self.frame)
#        self.frame.Show()
#        return True

# ctrl-alt-i
class MyApp(wit.InspectableApp):
    def OnInit(self):
        self.Init()
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    sample_list = []
    active_slotnum = -1 
    # 64M of RAM, minus the live rec buffer
    free_bytes = (64 * 1024 * 1024) - 153600
    app = MyApp()
    app.MainLoop()
